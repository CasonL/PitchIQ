---
description: 
globs: 
alwaysApply: true
---

# Rules

## ABSOLUTE ARCHATECTURE FOR SALESTRAINING-AI PROJECT:
### AI Collaboration Rules for the SalesTraining AI Project

**Instructions for the AI:** You must follow these rules at all times when working on this project. This project has a specific architecture, and deviating from these rules will cause significant problems.

#### **1. Core Architecture: The Two-Terminal Workflow**

This is a dual-part application with a Python backend and a React frontend. They are developed and run separately.

*   **Backend (Flask):**
    *   **To run for development, use the command:** `python run_app.py`
    *   This server runs on port `8080`. It serves the API and the final, built frontend files.

*   **Frontend (React + Vite):**
    *   **To run for development, navigate to `app/frontend` and use the command:** `npm run dev`
    *   This starts the Vite development server on port `5173`. It provides Hot Module Replacement (HMR) for instant updates.
    *   **All frontend development and debugging MUST be done using the Vite dev server (`npm run dev`).** Do not rely on refreshing the Flask app to see frontend changes.

#### **2. The Golden Rule of Building**

The *only* command to create a production-ready build of the frontend is:
`cd app/frontend && npm run build`

*   This command compiles all source code from `app/frontend/src` into the `app/frontend/dist` directory.
*   The script `build_react.py` is **deprecated and must not be used.** It is a known source of critical build issues.

#### **3. Pre-Task Checklist: Verify Before You Act**

Before attempting to diagnose any issue, you MUST first verify the following:

1.  **Is the Flask backend running?** (`python run_app.py`)
2.  **Is the Vite frontend dev server running?** (`cd app/frontend && npm run dev`)
3.  **Are there any errors in the browser's developer console?** Check for `404` errors, `401` errors, or React component errors. This is your primary source of truth for UI issues.

Do not proceed until you have confirmed these three points.

#### **4. The "Prove Your Build" Mandate**

After you make a code change to the frontend and run `npm run build`, you MUST prove that the change was correctly compiled.

1.  Identify a unique string of code that you just added or changed.
2.  Use the `grep` tool to search for that exact string inside the newly built JavaScript files in the `app/frontend/dist/assets/` directory.
3.  **If the string is not found, the build has failed.** You must halt and diagnose the build process itself (`vite.config.ts`) before doing anything else.

#### **5. No Ambiguity Rule: One Config to Rule Them All**

This project uses TypeScript for its configuration.

*   The only valid Vite configuration file is `app/frontend/vite.config.ts`.
*   If you ever detect a `vite.config.js` file, you must assume it is a dangerous remnant. Delete it immediately before proceeding with any build. This rule applies to all tooling (e.g., `tailwind.config.ts`, `postcss.config.js`). The TypeScript version (`.ts`) is always the correct one.






## Coding pattern preferences


- Always prefer simple solutions
- Simplify Simplify Simplify
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old ipmlementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 400-500 lines of code. **Refactor at that point**.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming



## Technical stack


- Python for the backend
- html/js for the frontend
- SQL databases, never JSON file storage
- Separate databases for dev, test, and prod
- Elasticsearch for search, using elastic.co

- Elastic â€” The Search AI Company
- Power insights and outcomes with The Elastic Search AI Platform. See into your data and find answers that matter with enterprise solutions designed to help you accelerate time to insight. Try Elastic ...
- elastic.co
- hosting
- Elastic.co will have dev and prod indexes
- Python tests


## Coding workflow preferences


- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed 
- Always think about what other methods and areas of code might be affected by code changes
